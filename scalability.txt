

How to Scale (and how not too)
This is not really an agile theme, but I find it an interesting theme.

Wikipedia defines scalability as:
Scalability is the property of a system to handle a growing amount of work
by adding resources to the system.

I think this is a good definition to understand before I discuss the rest of the article.

Firstly, since it ends with the suffix "ability" it implies that this is a relative term; which
would also seem to imply that
some systems are more scalable than others. In theory, if we could accurately measure the amount
of output of a system after adding one resource into the system, the fraction of the output divided
by the input would be the "scalability" property of the system.
(i.e. if you put were able to get three people of output out of the system, but you had
to put four people into the system, the scalability property would be 3/4 or 75%). The
closer this number is to one, the more scalable the system is or highly scalable. As this property
approaches 0, the system
is less scalable to the point that we would eventually say that this system is not scalable at all. And
for all practical purposes a system that has a scalability property of less than 0.75 is already not
very scalable because for every person we put into the system we are already losing 25% of their output.
For the purposes of this discussion, I will refer to these as non-scalable systems.

But let's back up a minute and ask an important question. I always like to ask "What problem are
we trying to solve", in this case by scaling.
I would argue that the reason that we would like to scale is because we are interested
in getting more output from the system. Unfortunately, our first reaction when faced with this problem,
is to add people to the system. As explained above, this should not be done until you have convinced
yourself that you have a scalable system, that you have somehow measured your scalability property. Said another
way, you should only add people to a "well oiled functioning team". If you just add people to a system that is
not scalable, you are just probably making the system worse by adding to the current disfunction.
In my honest opinion, this reaction is historical. In earlier times when everything was done manually, a lot of systems
were highly scalable. For example, if we were going to dig a ditch with shovels from Fcc tower to Wascana park, we would
just get more people to get more shovels and for every person that we added to this project, we would get 1 person's worth
of output out of this system.

an  to instantly add people is based off of old management practices
 should be done as a last resort,
and only after you have decided that your system is indeed scalable.
However, I would also argue that this should be our last reaction as it is probably the most expensive
option and has the most pitfalls.

Points to make:




We assume that the scalability property is also constant. Often this is not the case and I will digress
for a minute to illustrate this point.
Several years ago I went on a trek in the Himalayas. We were a four person tourist group but I was
surprised to discover that, other than the guide and the cook, there were 6 other sherpas. (12 in total)
I commented that 1 other friends had thought about coming and that then we would have been 14 in total.
I was surprised when he told me that we would have been 17 in total.
1 tent for every 2 guest, 1 tent for every 3 sherpas, 1 sherpa can carry tent and food for 2 guest.
ok I said, I see that if we add 2 more guests we need another sherpa to carry the food and tent, but
he replied that the new sherpa also needed a tent a food
